{"version":3,"sources":["extensions/extensionsHeader.js","extensions/treeview/Filter.js","extensions/treeview/NodeViewer.js","extensions/treeview/Data.js","extensions/treeview/Styles.js","extensions/treeview/TreeView.js"],"names":["ExtensionsHeader","className","sm","data-tour","this","props","title","link","href","target","rel","subTitle","React","Component","defaultMatcher","filterText","node","name","toLowerCase","indexOf","findNode","filter","matcher","children","length","find","child","filterTree","filtered","map","Object","assign","expandFilteredNodes","toggled","childrenWithMatches","shouldExpand","NodeViewer","json","JSON","stringify","data","id","loading","styleLight","tree","base","listStyle","backgroundColor","margin","padding","color","fontSize","position","cursor","display","activeLink","background","toggle","verticalAlign","marginLeft","height","width","wrapper","top","left","arrow","fill","strokeWidth","header","connector","borderLeft","borderBottom","lineHeight","subtree","paddingLeft","styleDark","Loading","style","Spinner","size","TreeView","state","onToggle","setState","active","onFilterMouseUp","value","trim","filters","Prism","highlightAll","decorators","Fragment","Row","Col","Card","CardHeader","CardTitle","CardBody","xl","lg","type","onKeyUp","theme","animations","connect","customizer"],"mappings":"4NAIMA,E,uKAEF,OACE,kBAAC,IAAD,CAAKC,UAAU,QACb,kBAAC,IAAD,CAAKC,GAAG,KAAKD,UAAU,SACrB,uBACEA,UAAU,qCACVE,YAAU,mBAETC,KAAKC,MAAMC,OAEbF,KAAKC,MAAME,KAAO,uBAAGC,KAAMJ,KAAKC,MAAME,KAAME,OAAO,SAASC,IAAI,uBAC9DN,KAAKC,MAAMM,UACP,uBAAGV,UAAU,gBAAgBG,KAAKC,MAAMM,gB,GAb1BC,IAAMC,WAoBtBb,O,0MCvBFc,EAAiB,SAACC,EAAYC,GACzC,OAAsE,IAA/DA,EAAKC,KAAKC,cAAcC,QAAQJ,EAAWG,gBAGvCE,EAAW,SAAXA,EAAYJ,EAAMK,EAAQC,GACrC,OACEA,EAAQD,EAAQL,IACfA,EAAKO,UACJP,EAAKO,SAASC,UACZR,EAAKO,SAASE,MAAK,SAAAC,GAAK,OAAIN,EAASM,EAAOL,EAAQC,OAI/CK,EAAa,SAAbA,EAAcX,EAAMK,GAAsC,IAA9BC,EAA6B,uDAAnBR,EAEjD,GAAIQ,EAAQD,EAAQL,KAAUA,EAAKO,SACjC,OAAOP,EAGT,IAAMY,EAAWZ,EAAKO,SACnBF,QAAO,SAAAK,GAAK,OAAIN,EAASM,EAAOL,EAAQC,MACxCO,KAAI,SAAAH,GAAK,OAAIC,EAAWD,EAAOL,EAAQC,MAC1C,OAAOQ,OAAOC,OAAO,GAAIf,EAAM,CAAEO,SAAUK,KAGhCI,EAAsB,SAAtBA,EAAuBhB,EAAMK,GAAsC,IAA9BC,EAA6B,uDAAnBR,EACtDS,EAAWP,EAAKO,SACpB,IAAKA,GAAgC,IAApBA,EAASC,OACxB,OAAOM,OAAOC,OAAO,GAAIf,EAAM,CAAEiB,SAAS,IAE5C,IAAMC,EAAsBlB,EAAKO,SAASF,QAAO,SAAAK,GAAK,OACpDN,EAASM,EAAOL,EAAQC,MAEpBa,EAAeD,EAAoBV,OAAS,EAOlD,OALIW,IACFZ,EAAWW,EAAoBL,KAAI,SAAAH,GACjC,OAAOM,EAAoBN,EAAOL,EAAQC,OAGvCQ,OAAOC,OAAO,GAAIf,EAAM,CAC7BO,SAAUA,EACVU,QAASE,KCpBEC,EAhBI,SAAC,GAAc,IAAZpB,EAAW,EAAXA,KAChBqB,EAAOC,KAAKC,UAAUvB,EAAM,KAAM,GAKtC,OAJKqB,IACHA,EALa,mDASb,yBAAKpC,UAAU,QACb,0BAAMA,UAAU,iBAAiBoC,KCf1BG,EAAO,CAClBvB,KAAM,kBACNwB,GAAI,EACJR,SAAS,EACTV,SAAU,CACR,CACEN,KAAM,UACNM,SAAU,CACR,CAAEN,KAAM,UACR,CAAEA,KAAM,WACR,CAAEA,KAAM,cACR,CAAEA,KAAM,aACR,CAAEA,KAAM,uBAGZ,CACEA,KAAM,eACNyB,SAAS,EACTnB,SAAU,IAEZ,CACEN,KAAM,MACNM,SAAU,CACR,CACEN,KAAM,aACNM,SAAU,CAAC,CAAEN,KAAM,iBAAmB,CAAEA,KAAM,kBAEhD,CAAEA,KAAM,cAGZ,CACEA,KAAM,SACNM,SAAU,CAAC,CAAEN,KAAM,iBAAmB,CAAEA,KAAM,gBAEhD,CAAEA,KAAM,eACR,CAAEA,KAAM,YACR,CAAEA,KAAM,kBCpCC0B,EAAa,CACxBC,KAAM,CACJC,KAAM,CACJC,UAAW,OACXC,gBAAiB,OACjBC,OAAQ,EACRC,QAAS,EACTC,MAAO,OACPC,SAAU,QAEZnC,KAAM,CACJ6B,KAAM,CACJO,SAAU,YAEZ7C,KAAM,CACJ8C,OAAQ,UACRD,SAAU,WACVH,QAAS,UACTK,QAAS,SAEXC,WAAY,CACVC,WAAY,WAEdC,OAAQ,CACNZ,KAAM,CACJO,SAAU,WACVE,QAAS,eACTI,cAAe,MACfC,WAAY,OACZC,OAAQ,OACRC,MAAO,QAETC,QAAS,CACPV,SAAU,WACVW,IAAK,MACLC,KAAM,MACNhB,OAAQ,iBACRY,OAAQ,QAEVA,OAAQ,GACRC,MAAO,GACPP,QAAS,eACTW,MAAO,CACLC,KAAM,UACNC,YAAa,IAGjBC,OAAQ,CACNvB,KAAM,CACJS,QAAS,eACTI,cAAe,MACfR,MAAO,WAETmB,UAAW,CACTR,MAAO,MACPD,OAAQ,OACRU,WAAY,kBACZC,aAAc,kBACdnB,SAAU,WACVW,IAAK,MACLC,KAAM,SAER1D,MAAO,CACLkE,WAAY,OACZd,cAAe,WAGnBe,QAAS,CACP3B,UAAW,OACX4B,YAAa,QAEfhC,QAAS,CACPQ,MAAO,cAMFyB,EAAY,CACvB/B,KAAM,CACJC,KAAM,CACJC,UAAW,OACXC,gBAAiB,UACjBC,OAAQ,EACRC,QAAS,EACTC,MAAO,UACPC,SAAU,QAEZnC,KAAM,CACJ6B,KAAM,CACJO,SAAU,YAEZ7C,KAAM,CACJ8C,OAAQ,UACRD,SAAU,WACVH,QAAS,UACTK,QAAS,SAEXC,WAAY,CACVC,WAAY,WAEdC,OAAQ,CACNZ,KAAM,CACJO,SAAU,WACVE,QAAS,eACTI,cAAe,MACfC,WAAY,OACZC,OAAQ,OACRC,MAAO,QAETC,QAAS,CACPV,SAAU,WACVW,IAAK,MACLC,KAAM,MACNhB,OAAQ,iBACRY,OAAQ,QAEVA,OAAQ,GACRC,MAAO,GACPP,QAAS,eACTW,MAAO,CACLC,KAAM,OACNC,YAAa,IAGjBC,OAAQ,CACNvB,KAAM,CACJS,QAAS,eACTI,cAAe,MACfR,MAAO,QAETmB,UAAW,CACTR,MAAO,MACPD,OAAQ,OACRU,WAAY,kBACZC,aAAc,kBACdnB,SAAU,WACVW,IAAK,MACLC,KAAM,SAER1D,MAAO,CACLkE,WAAY,OACZd,cAAe,WAGnBe,QAAS,CACP3B,UAAW,OACX4B,YAAa,QAEfhC,QAAS,CACPQ,MAAO,cCpIT0B,EAAU,SAAAvE,GACd,OACE,yBAAKwE,MAAOxE,EAAMwE,MAAMf,SACtB,kBAACgB,EAAA,EAAD,CAASC,KAAK,KAAK7B,MAAM,UAAU2B,MAAOxE,EAAMwE,MAAMZ,UAKtDe,E,4MACJC,MAAQ,CACNzC,Q,EAOF0C,SAAW,SAAClE,EAAMiB,GAAa,IAAD,EACH,EAAKgD,MAAtB5B,EADoB,EACpBA,OAAQb,EADY,EACZA,KAEZa,GACF,EAAK8B,UAAS,iBAAO,CAAE9B,SAAQ+B,QAAQ,MAGzCpE,EAAKoE,QAAUpE,EAAKoE,OAChBpE,EAAKO,WACPP,EAAKiB,QAAUA,GAEjB,EAAKkD,UAAS,iBAAO,CAAE9B,OAAQrC,EAAMwB,KAAMV,OAAOC,OAAO,GAAIS,Q,EAG/D6C,gBAAkB,YAA4B,IACtChE,EADqC,EAAxBZ,OAAU6E,MACRC,OACrB,IAAKlE,EACH,OAAO,EAAK8D,UAAS,iBAAO,CAAE3C,WAEhC,IAAIZ,EAAW4D,EAAmBhD,EAAMnB,GACxCO,EAAW4D,EAA4B5D,EAAUP,GACjD,EAAK8D,UAAS,iBAAO,CAAE3C,KAAMZ,O,kEAxB7B6D,IAAMC,iB,+BA2BE,IAAD,EACkBtF,KAAK6E,MAAtBzC,EADD,EACCA,KAAMa,EADP,EACOA,OAGd,OAFAsC,aAAWf,QAAUA,EAGnB,kBAAC,IAAMgB,SAAP,KACE,kBAAC,IAAD,CACEtF,MAAM,kBACNK,SAAS,sEACTJ,KAAK,mDAEP,kBAACsF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK5F,GAAG,MACN,kBAAC6F,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,iBAEF,kBAACC,EAAA,EAAD,KACE,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKK,GAAG,IAAIC,GAAG,MACb,2BACEC,KAAK,OACLpG,UAAU,oBACVqG,QAASlG,KAAKiF,kBAEhB,kBAAC,YAAD,CACE7C,KAAMA,EACN0C,SAAU9E,KAAK8E,SACfL,MACuB,UAArBzE,KAAKC,MAAMkG,OACU,cAArBnG,KAAKC,MAAMkG,MACP5D,EACAgC,EAENgB,WAAYA,aACZa,YAAY,KAGhB,kBAACV,EAAA,EAAD,CAAKK,GAAG,IAAIC,GAAG,KAAKnG,UAAU,gBAC5B,kBAAC,EAAD,CAAYe,KAAMqC,e,GAxEfzC,IAAMC,WA0Fd4F,uBANS,SAAAxB,GACtB,MAAO,CACLsB,MAAOtB,EAAMyB,WAAWA,WAAWH,SAIxBE,CAAyBzB","file":"static/js/115.fc723549.chunk.js","sourcesContent":["import React from \"react\"\nimport { Row, Col } from \"reactstrap\"\n// import { Star } from \"react-feather\"\n\nclass ExtensionsHeader extends React.Component {\n  render() {\n    return (\n      <Row className=\"mb-2\">\n        <Col sm=\"12\" className=\"ml-50\">\n          <p\n            className=\"font-medium-5 mt-1 extension-title\"\n            data-tour=\"extension-title\"\n          >\n            {this.props.title}\n          </p>\n          {this.props.link ? <a href={this.props.link} target=\"_blank\" rel=\"noopener noreferrer\">\n            {this.props.subTitle}\n          </a> : <p className=\"text-primary\">{this.props.subTitle}</p> \n          }\n        </Col>\n      </Row>\n    )\n  }\n}\nexport default ExtensionsHeader\n","// Helper functions for filtering\nexport const defaultMatcher = (filterText, node) => {\n  return node.name.toLowerCase().indexOf(filterText.toLowerCase()) !== -1\n}\n\nexport const findNode = (node, filter, matcher) => {\n  return (\n    matcher(filter, node) || // i match\n    (node.children && // or i have decendents and one of them match\n      node.children.length &&\n      !!node.children.find(child => findNode(child, filter, matcher)))\n  )\n}\n\nexport const filterTree = (node, filter, matcher = defaultMatcher) => {\n  // If im an exact match then all my children get to stay\n  if (matcher(filter, node) || !node.children) {\n    return node\n  }\n  // If not then only keep the ones that match or have matching descendants\n  const filtered = node.children\n    .filter(child => findNode(child, filter, matcher))\n    .map(child => filterTree(child, filter, matcher))\n  return Object.assign({}, node, { children: filtered })\n}\n\nexport const expandFilteredNodes = (node, filter, matcher = defaultMatcher) => {\n  let children = node.children\n  if (!children || children.length === 0) {\n    return Object.assign({}, node, { toggled: false })\n  }\n  const childrenWithMatches = node.children.filter(child =>\n    findNode(child, filter, matcher)\n  )\n  const shouldExpand = childrenWithMatches.length > 0\n  // If im going to expand, go through all the matches and see if thier children need to expand\n  if (shouldExpand) {\n    children = childrenWithMatches.map(child => {\n      return expandFilteredNodes(child, filter, matcher)\n    })\n  }\n  return Object.assign({}, node, {\n    children: children,\n    toggled: shouldExpand\n  })\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n// eslint-disable-next-line\nimport prism from \"prismjs\"\n\nconst HELP_MSG = \"Select A Node To See Its Data Structure Here...\"\n\nconst NodeViewer = ({ node }) => {\n  let json = JSON.stringify(node, null, 4)\n  if (!json) {\n    json = HELP_MSG\n  }\n\n  return (\n    <pre className=\"mt-0\">\n      <code className=\"language-json\">{json}</code>\n    </pre>\n  )\n}\nNodeViewer.propTypes = {\n  node: PropTypes.object\n}\n\nexport default NodeViewer\n","export const data = {\n  name: \"react-treebeard\",\n  id: 1,\n  toggled: true,\n  children: [\n    {\n      name: \"example\",\n      children: [\n        { name: \"app.js\" },\n        { name: \"data.js\" },\n        { name: \"index.html\" },\n        { name: \"styles.js\" },\n        { name: \"webpack.config.js\" }\n      ]\n    },\n    {\n      name: \"node_modules\",\n      loading: true,\n      children: []\n    },\n    {\n      name: \"src\",\n      children: [\n        {\n          name: \"components\",\n          children: [{ name: \"decorators.js\" }, { name: \"treebeard.js\" }]\n        },\n        { name: \"index.js\" }\n      ]\n    },\n    {\n      name: \"themes\",\n      children: [{ name: \"animations.js\" }, { name: \"default.js\" }]\n    },\n    { name: \"gulpfile.js\" },\n    { name: \"index.js\" },\n    { name: \"package.json\" }\n  ]\n}\n","export const styleLight = {\n  tree: {\n    base: {\n      listStyle: \"none\",\n      backgroundColor: \"#fff\",\n      margin: 0,\n      padding: 0,\n      color: \"#000\",\n      fontSize: \"14px\"\n    },\n    node: {\n      base: {\n        position: \"relative\"\n      },\n      link: {\n        cursor: \"pointer\",\n        position: \"relative\",\n        padding: \"0px 5px\",\n        display: \"block\"\n      },\n      activeLink: {\n        background: \"#f8f8f8\"\n      },\n      toggle: {\n        base: {\n          position: \"relative\",\n          display: \"inline-block\",\n          verticalAlign: \"top\",\n          marginLeft: \"-5px\",\n          height: \"24px\",\n          width: \"24px\"\n        },\n        wrapper: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          margin: \"-10px 0 0 -7px\",\n          height: \"14px\"\n        },\n        height: 10,\n        width: 10,\n        display: \"inline-block\",\n        arrow: {\n          fill: \"#565656\",\n          strokeWidth: 0\n        }\n      },\n      header: {\n        base: {\n          display: \"inline-block\",\n          verticalAlign: \"top\",\n          color: \"#565656\"\n        },\n        connector: {\n          width: \"2px\",\n          height: \"12px\",\n          borderLeft: \"solid 2px black\",\n          borderBottom: \"solid 2px black\",\n          position: \"absolute\",\n          top: \"0px\",\n          left: \"-21px\"\n        },\n        title: {\n          lineHeight: \"24px\",\n          verticalAlign: \"middle\"\n        }\n      },\n      subtree: {\n        listStyle: \"none\",\n        paddingLeft: \"19px\"\n      },\n      loading: {\n        color: \"#7367f0\"\n      }\n    }\n  }\n}\n\nexport const styleDark = {\n  tree: {\n    base: {\n      listStyle: \"none\",\n      backgroundColor: \"#262c49\",\n      margin: 0,\n      padding: 0,\n      color: \"#c2c6dc\",\n      fontSize: \"14px\"\n    },\n    node: {\n      base: {\n        position: \"relative\"\n      },\n      link: {\n        cursor: \"pointer\",\n        position: \"relative\",\n        padding: \"0px 5px\",\n        display: \"block\"\n      },\n      activeLink: {\n        background: \"#10163a\"\n      },\n      toggle: {\n        base: {\n          position: \"relative\",\n          display: \"inline-block\",\n          verticalAlign: \"top\",\n          marginLeft: \"-5px\",\n          height: \"24px\",\n          width: \"24px\"\n        },\n        wrapper: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          margin: \"-10px 0 0 -7px\",\n          height: \"14px\"\n        },\n        height: 10,\n        width: 10,\n        display: \"inline-block\",\n        arrow: {\n          fill: \"#fff\",\n          strokeWidth: 0\n        }\n      },\n      header: {\n        base: {\n          display: \"inline-block\",\n          verticalAlign: \"top\",\n          color: \"#fff\"\n        },\n        connector: {\n          width: \"2px\",\n          height: \"12px\",\n          borderLeft: \"solid 2px black\",\n          borderBottom: \"solid 2px black\",\n          position: \"absolute\",\n          top: \"0px\",\n          left: \"-21px\"\n        },\n        title: {\n          lineHeight: \"24px\",\n          verticalAlign: \"middle\"\n        }\n      },\n      subtree: {\n        listStyle: \"none\",\n        paddingLeft: \"19px\"\n      },\n      loading: {\n        color: \"#7367f0\"\n      }\n    }\n  }\n}\n","import React from \"react\"\nimport ExtensionsHeader from \"../extensionsHeader\"\nimport {\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Spinner\n} from \"reactstrap\"\nimport { Treebeard, decorators } from \"react-treebeard\"\nimport Prism from \"prismjs\"\nimport { connect } from \"react-redux\"\nimport * as filters from \"./Filter\"\nimport NodeViewer from \"./NodeViewer\"\nimport { data } from \"./Data\"\nimport { styleLight, styleDark } from \"./Styles\"\nconst Loading = props => {\n  return (\n    <div style={props.style.wrapper}>\n      <Spinner size=\"sm\" color=\"primary\" style={props.style.arrow} />\n    </div>\n  )\n}\n\nclass TreeView extends React.Component {\n  state = {\n    data\n  }\n\n  componentDidMount() {\n    Prism.highlightAll()\n  }\n\n  onToggle = (node, toggled) => {\n    const { cursor, data } = this.state\n\n    if (cursor) {\n      this.setState(() => ({ cursor, active: false }))\n    }\n\n    node.active = !node.active\n    if (node.children) {\n      node.toggled = toggled\n    }\n    this.setState(() => ({ cursor: node, data: Object.assign({}, data) }))\n  }\n\n  onFilterMouseUp = ({ target: { value } }) => {\n    const filter = value.trim()\n    if (!filter) {\n      return this.setState(() => ({ data }))\n    }\n    let filtered = filters.filterTree(data, filter)\n    filtered = filters.expandFilteredNodes(filtered, filter)\n    this.setState(() => ({ data: filtered }))\n  }\n\n  render() {\n    const { data, cursor } = this.state\n    decorators.Loading = Loading\n\n    return (\n      <React.Fragment>\n        <ExtensionsHeader\n          title=\"React Treebeard\"\n          subTitle=\"Data-Driven, Fast, Efficient and Customisable tree view component. \"\n          link=\"https://github.com/storybookjs/react-treebeard\"\n        />\n        <Row>\n          <Col sm=\"12\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Default</CardTitle>\n              </CardHeader>\n              <CardBody>\n                <Row>\n                  <Col xl=\"6\" lg=\"12\">\n                    <input\n                      type=\"text\"\n                      className=\"form-control mb-1\"\n                      onKeyUp={this.onFilterMouseUp}\n                    />\n                    <Treebeard\n                      data={data}\n                      onToggle={this.onToggle}\n                      style={\n                        this.props.theme === \"light\" ||\n                        this.props.theme === \"semi-dark\"\n                          ? styleLight\n                          : styleDark\n                      }\n                      decorators={decorators}\n                      animations={false}\n                    />\n                  </Col>\n                  <Col xl=\"6\" lg=\"12\" className=\"mt-2 mt-xl-0\">\n                    <NodeViewer node={cursor} />\n                  </Col>\n                </Row>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    theme: state.customizer.customizer.theme\n  }\n}\n\nexport default connect(mapStateToProps)(TreeView)\n"],"sourceRoot":""}