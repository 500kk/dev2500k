{"version":3,"sources":["../node_modules/prismjs/components/prism-jsx.min.js","components/reactstrap/spinners/SpinnerSourceCode.js","components/reactstrap/spinners/SpinnerBorder.js","components/reactstrap/spinners/SpinnerColors.js","components/reactstrap/spinners/SpinnerGrowing.js","components/reactstrap/spinners/SpinnerGrowingColored.js","components/reactstrap/spinners/SpinnerFlex.js","components/reactstrap/spinners/SpinnerFloat.js","components/reactstrap/spinners/SpinnerTextAlignment.js","components/reactstrap/spinners/SpinnerSizes.js","components/reactstrap/spinners/SpinnerButtons.js","components/reactstrap/spinners/Spinners.js"],"names":["i","t","util","clone","languages","javascript","jsx","extend","tag","pattern","inside","insertBefore","spread","punctuation","script","alias","rest","o","content","map","join","hooks","add","language","p","n","e","length","a","s","type","tagName","pop","push","openedBraces","g","splice","Token","tokens","Prism","spinnerBorder","className","spinnerColors","spinnerGrowing","spinnerGrowColors","spinnerFlex","spinnerFloat","spinnerTextAlignment","spinnerSizes","spinnerButton","SpinnerBorder","state","activeTab","toggleTab","tab","setState","Fragment","Card","CardHeader","CardTitle","Nav","tabs","NavItem","NavLink","classnames","active","this","onClick","size","CardBody","TabContent","TabPane","tabId","Spinner","color","React","Component","SpinnerColors","SpinnerGrowing","SpinnerGrowColors","SpinnerFlex","SpinnerFloat","SpinnerTextAlignment","SpinnerSizes","SpinnerButton","Button","Ripple","Spinners","highlightAll","BreadCrumb","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","md","sm","SpinnerButtons"],"mappings":"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","file":"static/js/109.dfa8ee57.chunk.js","sourcesContent":["!function(i){var t=i.util.clone(i.languages.javascript);i.languages.jsx=i.languages.extend(\"markup\",t),i.languages.jsx.tag.pattern=/<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:$-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}))*\\s*\\/?)?>/i,i.languages.jsx.tag.inside.tag.pattern=/^<\\/?[^\\s>\\/]*/i,i.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i,i.languages.jsx.tag.inside.tag.inside[\"class-name\"]=/^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/,i.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:/\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}/,inside:{punctuation:/\\.{3}|[{}.]/,\"attr-value\":/\\w+/}}},i.languages.jsx.tag),i.languages.insertBefore(\"inside\",\"attr-value\",{script:{pattern:/=(?:\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,inside:{\"script-punctuation\":{pattern:/^=(?={)/,alias:\"punctuation\"},rest:i.languages.jsx},alias:\"language-javascript\"}},i.languages.jsx.tag);var o=function(t){return t?\"string\"==typeof t?t:\"string\"==typeof t.content?t.content:t.content.map(o).join(\"\"):\"\"},p=function(t){for(var n=[],e=0;e<t.length;e++){var a=t[e],s=!1;if(\"string\"!=typeof a&&(\"tag\"===a.type&&a.content[0]&&\"tag\"===a.content[0].type?\"</\"===a.content[0].content[0].content?0<n.length&&n[n.length-1].tagName===o(a.content[0].content[1])&&n.pop():\"/>\"===a.content[a.content.length-1].content||n.push({tagName:o(a.content[0].content[1]),openedBraces:0}):0<n.length&&\"punctuation\"===a.type&&\"{\"===a.content?n[n.length-1].openedBraces++:0<n.length&&0<n[n.length-1].openedBraces&&\"punctuation\"===a.type&&\"}\"===a.content?n[n.length-1].openedBraces--:s=!0),(s||\"string\"==typeof a)&&0<n.length&&0===n[n.length-1].openedBraces){var g=o(a);e<t.length-1&&(\"string\"==typeof t[e+1]||\"plain-text\"===t[e+1].type)&&(g+=o(t[e+1]),t.splice(e+1,1)),0<e&&(\"string\"==typeof t[e-1]||\"plain-text\"===t[e-1].type)&&(g=o(t[e-1])+g,t.splice(e-1,1),e--),t[e]=new i.Token(\"plain-text\",g,null,g)}a.content&&\"string\"!=typeof a.content&&p(a.content)}};i.hooks.add(\"after-tokenize\",function(t){\"jsx\"!==t.language&&\"tsx\"!==t.language||p(t.tokens)})}(Prism);","import React from \"react\"\n\nexport const spinnerBorder = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Spinner} from \"reactstrap\"\n\nclass SpinnerBorder extends React.Component {\n\n  render() {\n    return(\n      <Spinner color=\"primary\" />\n    )\n  }\n}\nexport default SpinnerBorder\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerColors = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Spinner} from \"reactstrap\"\n\nclass SpinnerColors extends React.Component {\n\n  render() {\n    return(\n      <Spinner color=\"primary\" />\n      <Spinner color=\"success\" />\n      <Spinner color=\"info\" />\n      <Spinner color=\"danger\" />\n      <Spinner color=\"warning\" />\n      <Spinner color=\"light\" />\n      <Spinner color=\"dark\" />\n    )\n  }\n}\nexport default SpinnerColors\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerGrowing = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Spinner} from \"reactstrap\"\n\nclass SpinnerGrowing extends React.Component {\n\n  render() {\n    return(\n      <Spinner type=\"grow\" color=\"primary\" />\n    )\n  }\n}\nexport default SpinnerGrowing\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerGrowColors = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\n  import React from \"react\"\n  import {Spinner} from \"reactstrap\"\n\n  class SpinnerColors extends React.Component {\n\n    render() {\n      return(\n        <Spinner type=\"grow\" color=\"primary\" />\n        <Spinner type=\"grow\" color=\"success\" />\n        <Spinner type=\"grow\" color=\"info\" />\n        <Spinner type=\"grow\" color=\"danger\" />\n        <Spinner type=\"grow\" color=\"warning\" />\n        <Spinner type=\"grow\" color=\"light\" />\n        <Spinner type=\"grow\" color=\"dark\" />\n      )\n    }\n  }\n  export default SpinnerColors\n        `}\n    </code>\n  </pre>\n)\n\nexport const spinnerFlex = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Spinner} from \"reactstrap\"\n\nclass SpinnerFlex extends React.Component {\n\n  render() {\n    return(\n      <div className=\"d-flex justify-content-between align-items-center\">\n        <strong>Loading...</strong>\n        <Spinner color=\"primary\" />\n      </div>\n    )\n  }\n}\nexport default SpinnerFlex\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerFloat = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Spinner} from \"reactstrap\"\n\nclass SpinnerFloat extends React.Component {\n\n  render() {\n    return(\n        <Spinner color=\"primary\" className=\"float-right\" />\n    )\n  }\n}\nexport default SpinnerFloat\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerTextAlignment = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Spinner} from \"reactstrap\"\n\nclass SpinnerTextAlignment extends React.Component {\n\n  render() {\n    return(\n      <div className=\"text-center\">\n        <Spinner color=\"primary\" />\n      </div>\n    )\n  }\n}\nexport default SpinnerTextAlignment\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerSizes = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Spinner} from \"reactstrap\"\n\nclass SpinnerSizes extends React.Component {\n\n  render() {\n    return(\n      <Spinner color=\"primary\" size=\"sm\" />\n      <Spinner type=\"grow\" color=\"primary\" size=\"sm\" />\n\n      <Spinner color=\"primary\" />\n      <Spinner type=\"grow\" color=\"primary\" />\n\n      <Spinner color=\"primary\" size=\"lg\" />\n      <Spinner type=\"grow\" color=\"primary\" size=\"lg\" />\n    )\n  }\n}\nexport default SpinnerSizes\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerButton = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Spinner} from \"reactstrap\"\n\nclass SpinnerButton extends React.Component {\n\n  render() {\n    return(\n        <Button color=\"primary\" className=\"mr-1 mb-1\">\n          <Spinner color=\"white\" size=\"sm\" />\n        </Button>\n\n        <Button color=\"primary\" className=\"mr-1 mb-1\">\n          <Spinner color=\"white\" size=\"sm\" />\n          <span className=\"ml-50\">Loading...</span>\n        </Button>\n\n        <Button color=\"primary\" className=\"mr-1 mb-1\">\n          <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n        </Button>\n\n        <Button color=\"primary\" className=\"mb-1\">\n          <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n          <span className=\"ml-50\">Loading...</span>\n        </Button>\n    )\n  }\n}\nexport default SpinnerButton\n`}\n    </code>\n  </pre>\n)\n","import React from \"react\"\nimport {\n  Spinner,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { spinnerBorder } from \"./SpinnerSourceCode\"\n\nclass SpinnerBorder extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Border Spinner</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>Spinner</code> tag to create a bordered spinner.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Spinner color=\"primary\" />\n              </TabPane>\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerBorder}</TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default SpinnerBorder\n","import React from \"react\"\nimport {\n  Spinner,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { spinnerColors } from \"./SpinnerSourceCode\"\n\nclass SpinnerColors extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Colored Spinners</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>color</code> attribute to create a colored spinner.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Spinner className=\"mr-50\" color=\"primary\" />\n                <Spinner className=\"mr-50\" color=\"success\" />\n                <Spinner className=\"mr-50\" color=\"info\" />\n                <Spinner className=\"mr-50\" color=\"danger\" />\n                <Spinner className=\"mr-50\" color=\"warning\" />\n                <Spinner className=\"mr-50\" color=\"light\" />\n                <Spinner className=\"mr-50\" color=\"dark\" />\n              </TabPane>\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerColors}</TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default SpinnerColors\n","import React from \"react\"\nimport {\n  Spinner,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { spinnerGrowing } from \"./SpinnerSourceCode\"\n\nclass SpinnerGrowing extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Growing Spinner</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>type=\"grow\"</code> with spinner tag to create a growing\n              spinner.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Spinner type=\"grow\" color=\"primary\" />\n              </TabPane>\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerGrowing}</TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default SpinnerGrowing\n","import React from \"react\"\nimport {\n  Spinner,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { spinnerGrowColors } from \"./SpinnerSourceCode\"\n\nclass SpinnerGrowColors extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Colored Growing Spinners</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>color</code> and <code>type</code> attribute to create a\n              colored growing spinner.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"primary\" />\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"success\" />\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"info\" />\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"danger\" />\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"warning\" />\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"light\" />\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"dark\" />\n              </TabPane>\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerGrowColors}</TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default SpinnerGrowColors\n","import React from \"react\"\nimport {\n  Spinner,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { spinnerFlex } from \"./SpinnerSourceCode\"\n\nclass SpinnerFlex extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Flex</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use Flexbox utilities to place spinners.Use <code>.d-flex</code>{\" \"}\n              and <code>.justify-content-[side]</code>.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"d-flex justify-content-between align-items-center\">\n                  <strong>Loading...</strong>\n                  <Spinner color=\"primary\" />\n                </div>\n              </TabPane>\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerFlex}</TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default SpinnerFlex\n","import React from \"react\"\nimport {\n  Spinner,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { spinnerFloat } from \"./SpinnerSourceCode\"\n\nclass SpinnerFloat extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Float</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>.float-[side]</code> with spinner tag to change\n              spinner's position.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Spinner color=\"primary\" className=\"float-right\" />\n              </TabPane>\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerFloat}</TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default SpinnerFloat\n","import React from \"react\"\nimport {\n  Spinner,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { spinnerTextAlignment } from \"./SpinnerSourceCode\"\n\nclass SpinnerTextAlignment extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Text Alignment</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              You can also use <code>.text-[side]</code> as a wrapper to spinner\n              tag to change spinner's position.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"text-center\">\n                  <Spinner color=\"primary\" />\n                </div>\n              </TabPane>\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerTextAlignment}</TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default SpinnerTextAlignment\n","import React from \"react\"\nimport {\n  Spinner,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { spinnerSizes } from \"./SpinnerSourceCode\"\n\nclass SpinnerSizes extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Sizes</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use attribute <code>size=\"sm/lg\"</code> for Small or Large spinner\n              .\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Spinner color=\"primary\" size=\"sm\" />\n                <Spinner\n                  type=\"grow\"\n                  color=\"primary\"\n                  size=\"sm\"\n                  className=\"mr-2\"\n                />\n\n                <Spinner color=\"primary\" />\n                <Spinner type=\"grow\" color=\"primary\" className=\"mr-2\" />\n\n                <Spinner color=\"primary\" size=\"lg\" />\n                <Spinner type=\"grow\" color=\"primary\" size=\"lg\" />\n              </TabPane>\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerSizes}</TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default SpinnerSizes\n","import React from \"react\"\nimport {\n  Button,\n  Spinner,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { spinnerButton } from \"./SpinnerSourceCode\"\n\nclass SpinnerButton extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Buttons</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"primary\">\n                    <Spinner color=\"white\" size=\"sm\" />\n                  </Button.Ripple>\n                </div>\n\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"primary\">\n                    <Spinner color=\"white\" size=\"sm\" />\n                    <span className=\"ml-50\">Loading...</span>\n                  </Button.Ripple>\n                </div>\n\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"primary\">\n                    <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                  </Button.Ripple>\n                </div>\n\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"primary\">\n                    <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                    <span className=\"ml-50\">Loading...</span>\n                  </Button.Ripple>\n                </div>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {spinnerButton}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default SpinnerButton\n","import React from \"react\"\nimport { Row, Col } from \"reactstrap\"\nimport BreadCrumbs from \"../../@vuexy/breadCrumbs/BreadCrumb\"\nimport SpinnerBorder from \"./SpinnerBorder\"\nimport SpinnerColors from \"./SpinnerColors\"\nimport SpinnerGrow from \"./SpinnerGrowing\"\nimport SpinnerGrowColors from \"./SpinnerGrowingColored\"\nimport SpinnerFlex from \"./SpinnerFlex\"\nimport SpinnerFloat from \"./SpinnerFloat\"\nimport SpinnerTextAlignment from \"./SpinnerTextAlignment\"\nimport SpinnerSizes from \"./SpinnerSizes\"\nimport SpinnerButtons from \"./SpinnerButtons\"\nimport Prism from \"prismjs\"\nimport \"prismjs/components/prism-jsx.min\"\nclass Spinners extends React.Component {\n  componentDidMount() {\n    Prism.highlightAll()\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <BreadCrumbs\n          breadCrumbTitle=\"Spinners\"\n          breadCrumbParent=\"Components\"\n          breadCrumbActive=\"Spinners\"\n        />\n        <Row>\n          <Col md=\"6\" sm=\"12\">\n            <SpinnerBorder />\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <SpinnerColors />\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <SpinnerGrow />\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <SpinnerGrowColors />\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <SpinnerFlex />\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <SpinnerFloat />\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <SpinnerTextAlignment />\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <SpinnerSizes />\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <SpinnerButtons />\n          </Col>\n        </Row>\n      </React.Fragment>\n    )\n  }\n}\nexport default Spinners\n"],"sourceRoot":""}