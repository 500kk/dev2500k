{"version":3,"sources":["../node_modules/prismjs/components/prism-jsx.min.js","components/@vuexy/chips/ChipComponent.js","components/@vuexy/chips/ChipSourceCode.js","components/@vuexy/chips/ChipsDefault.js","components/@vuexy/chips/ChipsColors.js","components/@vuexy/chips/ChipsAvatarColors.js","components/@vuexy/chips/ChipsIcons.js","components/@vuexy/chips/ChipsClosable.js","components/@vuexy/chips/ClosableIcons.js","components/@vuexy/chips/Chips.js"],"names":["i","t","util","clone","languages","javascript","jsx","extend","tag","pattern","inside","insertBefore","spread","punctuation","script","alias","rest","o","content","map","join","hooks","add","language","p","n","e","length","a","s","type","tagName","pop","push","openedBraces","g","splice","Token","tokens","Prism","Chip","closeChip","target","closest","remove","className","this","props","color","avatarImg","avatarText","avatarIcon","avatarColor","src","alt","height","width","text","closable","onClick","closableIcon","React","Component","chipsDefault","chipsColors","chipsAvatarColors","chipsIcons","chipsClosable","chipsClosableIcons","ChipsDefault","state","activeTab","toggleTab","tab","setState","Fragment","Card","CardHeader","CardTitle","Nav","tabs","NavItem","NavLink","classnames","active","size","CardBody","TabContent","TabPane","tabId","chipImg","ChipsColors","ChipsAvatarColors","ChipsIcons","ChipsClosable","ChipsClosableIcons","Chips","highlightAll","BreadCrumb","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","sm"],"mappings":"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","file":"static/js/79.3ac62f62.chunk.js","sourcesContent":["!function(i){var t=i.util.clone(i.languages.javascript);i.languages.jsx=i.languages.extend(\"markup\",t),i.languages.jsx.tag.pattern=/<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:$-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}))*\\s*\\/?)?>/i,i.languages.jsx.tag.inside.tag.pattern=/^<\\/?[^\\s>\\/]*/i,i.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i,i.languages.jsx.tag.inside.tag.inside[\"class-name\"]=/^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/,i.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:/\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}/,inside:{punctuation:/\\.{3}|[{}.]/,\"attr-value\":/\\w+/}}},i.languages.jsx.tag),i.languages.insertBefore(\"inside\",\"attr-value\",{script:{pattern:/=(?:\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,inside:{\"script-punctuation\":{pattern:/^=(?={)/,alias:\"punctuation\"},rest:i.languages.jsx},alias:\"language-javascript\"}},i.languages.jsx.tag);var o=function(t){return t?\"string\"==typeof t?t:\"string\"==typeof t.content?t.content:t.content.map(o).join(\"\"):\"\"},p=function(t){for(var n=[],e=0;e<t.length;e++){var a=t[e],s=!1;if(\"string\"!=typeof a&&(\"tag\"===a.type&&a.content[0]&&\"tag\"===a.content[0].type?\"</\"===a.content[0].content[0].content?0<n.length&&n[n.length-1].tagName===o(a.content[0].content[1])&&n.pop():\"/>\"===a.content[a.content.length-1].content||n.push({tagName:o(a.content[0].content[1]),openedBraces:0}):0<n.length&&\"punctuation\"===a.type&&\"{\"===a.content?n[n.length-1].openedBraces++:0<n.length&&0<n[n.length-1].openedBraces&&\"punctuation\"===a.type&&\"}\"===a.content?n[n.length-1].openedBraces--:s=!0),(s||\"string\"==typeof a)&&0<n.length&&0===n[n.length-1].openedBraces){var g=o(a);e<t.length-1&&(\"string\"==typeof t[e+1]||\"plain-text\"===t[e+1].type)&&(g+=o(t[e+1]),t.splice(e+1,1)),0<e&&(\"string\"==typeof t[e-1]||\"plain-text\"===t[e-1].type)&&(g=o(t[e-1])+g,t.splice(e-1,1),e--),t[e]=new i.Token(\"plain-text\",g,null,g)}a.content&&\"string\"!=typeof a.content&&p(a.content)}};i.hooks.add(\"after-tokenize\",function(t){\"jsx\"!==t.language&&\"tsx\"!==t.language||p(t.tokens)})}(Prism);","import React from \"react\"\nimport { X } from \"react-feather\"\nclass Chip extends React.Component {\n  closeChip = e => {\n    e.target.closest(\".chip\").remove()\n  }\n\n  render() {\n    return (\n      <div\n        className={`chip ${this.props.className} ${\n          this.props.color ? `chip-${this.props.color}` : null\n        }`}\n      >\n        <div className=\"chip-body\">\n          {(!this.props.avatarImg && this.props.avatarText) ||\n          (!this.props.avatarImg && this.props.avatarIcon) ? (\n            <div\n              className={`avatar ${\n                this.props.avatarColor ? `bg-${this.props.avatarColor}` : null\n              }`}\n            >\n              <div className=\"avatar-content\">\n                {this.props.avatarText ? this.props.avatarText : null}\n                {this.props.avatarIcon ? this.props.avatarIcon : null}\n              </div>\n            </div>\n          ) : this.props.avatarImg ? (\n            <div className=\"avatar\">\n              <img\n                src={this.props.avatarImg}\n                alt=\"chipImg\"\n                height=\"20\"\n                width=\"20\"\n              />\n            </div>\n          ) : null}\n          <div className=\"chip-text\">{this.props.text}</div>\n          {this.props.closable ? (\n            <div className=\"chip-closable\" onClick={e => this.closeChip(e)}>\n              {this.props.closableIcon ? this.props.closableIcon : <X />}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Chip\n","import React from \"react\"\n\nexport const chipsDefault = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport Chip from \"./ChipComponent\"\nimport { User } from \"react-feather\"\nclass chipDefault extends React.Component {\n\n  render() {\n    return(\n      <Chip className=\"mr-1\" text=\"Base Chip\" />\n      <Chip className=\"mr-1\" avatarText=\"RX\" text=\"Avatar Text\" />\n      <Chip className=\"mr-1\" avatarIcon={<User />} text=\"Avatar Icon\" />\n      <Chip className=\"mr-1\" avatarImg={chipImg} text=\"Avatar Image\" />\n      <Chip text=\"Chip Closable\" closable />\n    )}\n}\nexport default chipDefault\n`}\n    </code>\n  </pre>\n)\n\nexport const chipsColors = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport Chip from \"./ChipComponent\"\nimport { User } from \"react-feather\"\nclass chipColors extends React.Component {\n\n  render() {\n    return(\n      <Chip className=\"mr-1\" color=\"success\" avatarText=\"RX\" text=\"Avatar Text\" />\n      <Chip className=\"mr-1\" color=\"info\" avatarIcon={<User />} text=\"Avatar Icon\" />\n      <Chip className=\"mr-1\" color=\"warning\" avatarImg={chipImg} text=\"Avatar Image\" />\n      <Chip color=\"danger\" text=\"Chip Closable\" closable />\n    )}\n}\nexport default chipColors\n`}\n    </code>\n  </pre>\n)\n\nexport const chipsAvatarColors = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport Chip from \"./ChipComponent\"\nimport { User } from \"react-feather\"\n\nclass chipAvatarColors extends React.Component {\n\n  render() {\n    return(\n      <Chip className=\"mr-1\" avatarColor=\"primary\" avatarText=\"RX\" text=\"Avatar Text\" />\n      <Chip className=\"mr-1\" avatarColor=\"success\" avatarText=\"VS\" text=\"Avatar Text\" />\n      <Chip className=\"mr-1\" avatarColor=\"info\" avatarIcon={<User />} text=\"Avatar Text\" />\n      <Chip className=\"mr-1\" avatarColor=\"danger\" avatarIcon={<User />} text=\"Avatar Text\" />\n      <Chip avatarColor=\"warning\" avatarIcon={<User />} text=\"Avatar Text\" />\n    )}\n}\nexport default chipAvatarColors\n`}\n    </code>\n  </pre>\n)\n\nexport const chipsIcons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport Chip from \"./ChipComponent\"\nimport { User, Mail, Share, Slash, Battery, Edit } from \"react-feather\"\n\nclass chipIcons extends React.Component {\n\n  render() {\n    return(\n      <Chip className=\"mr-1\" avatarIcon={<User />} text=\"User Icon\" />\n      <Chip className=\"mr-1\" avatarColor=\"primary\" avatarIcon={<Share />} text=\"Share Icon\" />\n      <Chip className=\"mr-1\" avatarColor=\"success\" avatarIcon={<Mail />} text=\"Mail Icon\" />\n      <Chip className=\"mr-1\" avatarColor=\"danger\" avatarIcon={<Slash />} text=\"Block Icon\" />\n      <Chip className=\"mr-1\" avatarColor=\"warning\" avatarIcon={<Battery />} text=\"Battery Icon\" />\n      <Chip className=\"mr-1\" avatarColor=\"info\" avatarIcon={<Edit />} text=\"Edit Icon\" />\n    )}\n}\nexport default chipIcons\n`}\n    </code>\n  </pre>\n)\n\nexport const chipsClosable = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport Chip from \"./ChipComponent\"\n\nclass chipClosable extends React.Component {\n\n  render() {\n    return(\n      <Chip className=\"mr-1\" text=\"Dribble\" closable />\n      <Chip className=\"mr-1\" text=\"Github\" closable />\n      <Chip className=\"mr-1\" text=\"Behance\" closable />\n      <Chip className=\"mr-1\" text=\"ReactJS\" closable />\n      <Chip text=\"Vuexy\" closable />\n    )}\n}\nexport default chipClosable\n`}\n    </code>\n  </pre>\n)\n\nexport const chipsClosableIcons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport Chip from \"./ChipComponent\"\nimport { Trash, Trash2, MinusCircle, Delete } from \"react-feather\"\n\nclass ChipClosableIcons extends React.Component {\n  render() {\n    return(\n      <Chip className=\"mr-1\" text=\"Dribble\" closableIcon={<Trash />} closable />\n      <Chip className=\"mr-1\" text=\"Github\" closableIcon={<Trash2 />} closable />\n      <Chip className=\"mr-1\" text=\"Behance\" closableIcon={<Delete />} closable />\n      <Chip className=\"mr-1\" text=\"ReactJS\" closableIcon={<MinusCircle />} closable />\n    )}\n}\nexport default ChipClosableIcons\n`}\n    </code>\n  </pre>\n)\n","import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport Chip from \"./ChipComponent\"\nimport { Eye, Code, User } from \"react-feather\"\nimport { chipsDefault } from \"./ChipSourceCode\"\nimport chipImg from \"../../../assets/img/portrait/small/avatar-s-2.jpg\"\nclass ChipsDefault extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Default</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>Chips helps you represent simple data with Various options.</p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Chip className=\"mr-1\" text=\"Basic Chip\" />\n                <Chip className=\"mr-1\" avatarText=\"RX\" text=\"Avatar Text\" />\n                <Chip\n                  className=\"mr-1\"\n                  avatarIcon={<User />}\n                  text=\"Avatar Icon\"\n                />\n                <Chip\n                  className=\"mr-1\"\n                  avatarImg={chipImg}\n                  text=\"Avatar Image\"\n                />\n                <Chip text=\"Chip Closable\" closable />\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {chipsDefault}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ChipsDefault\n","import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport Chip from \"./ChipComponent\"\nimport classnames from \"classnames\"\nimport { Eye, Code, User } from \"react-feather\"\nimport { chipsColors } from \"./ChipSourceCode\"\nimport chipImg from \"../../../assets/img/portrait/small/avatar-s-2.jpg\"\nclass ChipsColors extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Colors</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use prop{\" \"}\n              <code>color=[primary | success | danger | info | warning ]</code>{\" \"}\n              to create a colored chip.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Chip className=\"mr-1\" color=\"primary\" text=\"Primary Chip\" />\n                <Chip\n                  className=\"mr-1\"\n                  color=\"success\"\n                  avatarText=\"RX\"\n                  text=\"Avatar Text\"\n                />\n                <Chip\n                  className=\"mr-1\"\n                  color=\"info\"\n                  avatarIcon={<User />}\n                  text=\"Avatar Icon\"\n                />\n                <Chip\n                  className=\"mr-1\"\n                  color=\"warning\"\n                  avatarImg={chipImg}\n                  text=\"Avatar Image\"\n                />\n                <Chip color=\"danger\" text=\"Chip Closable\" closable />\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {chipsColors}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ChipsColors\n","import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport Chip from \"./ChipComponent\"\nimport { Eye, Code, User } from \"react-feather\"\nimport { chipsAvatarColors } from \"./ChipSourceCode\"\n\nclass ChipsAvatarColors extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Avatar Colors</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use prop{\" \"}\n              <code>\n                avatarColor=[primary | success | danger | info | warning | dark]\n              </code>{\" \"}\n              to create a colored avatar chip.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Chip\n                  className=\"mr-1\"\n                  avatarColor=\"primary\"\n                  avatarText=\"RX\"\n                  text=\"Avatar Text\"\n                />\n                <Chip\n                  className=\"mr-1\"\n                  avatarColor=\"success\"\n                  avatarText=\"VS\"\n                  text=\"Avatar Text\"\n                />\n                <Chip\n                  className=\"mr-1\"\n                  avatarColor=\"info\"\n                  avatarIcon={<User />}\n                  text=\"Avatar Text\"\n                />\n                <Chip\n                  className=\"mr-1\"\n                  avatarColor=\"danger\"\n                  avatarIcon={<User />}\n                  text=\"Avatar Text\"\n                />\n                <Chip\n                  avatarColor=\"warning\"\n                  avatarIcon={<User />}\n                  text=\"Avatar Text\"\n                />\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {chipsAvatarColors}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ChipsAvatarColors\n","import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport {\n  Eye,\n  Code,\n  User,\n  Share,\n  Mail,\n  Slash,\n  Battery,\n  Edit\n} from \"react-feather\"\nimport Chip from \"./ChipComponent\"\nimport { chipsIcons } from \"./ChipSourceCode\"\n\nclass ChipsIcons extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Icons</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use prop <code>avatarIcon</code> add icon to avatar.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Chip className=\"mr-1\" avatarIcon={<User />} text=\"User Icon\" />\n                <Chip\n                  className=\"mr-1\"\n                  avatarColor=\"primary\"\n                  avatarIcon={<Share />}\n                  text=\"Share Icon\"\n                />\n                <Chip\n                  className=\"mr-1\"\n                  avatarColor=\"success\"\n                  avatarIcon={<Mail />}\n                  text=\"Mail Icon\"\n                />\n                <Chip\n                  className=\"mr-1\"\n                  avatarColor=\"danger\"\n                  avatarIcon={<Slash />}\n                  text=\"Block Icon\"\n                />\n                <Chip\n                  className=\"mr-1\"\n                  avatarColor=\"warning\"\n                  avatarIcon={<Battery />}\n                  text=\"Battery Icon\"\n                />\n                <Chip\n                  className=\"mr-1\"\n                  avatarColor=\"info\"\n                  avatarIcon={<Edit />}\n                  text=\"Edit Icon\"\n                />\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {chipsIcons}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ChipsIcons\n","import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport Chip from \"./ChipComponent\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { chipsClosable } from \"./ChipSourceCode\"\n\nclass ChipsClosable extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Chips Closable</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use prop <code>closable</code> to make your chips closable.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Chip className=\"mr-1\" text=\"Dribble\" closable />\n                <Chip className=\"mr-1\" text=\"Github\" closable />\n                <Chip className=\"mr-1\" text=\"Behance\" closable />\n                <Chip className=\"mr-1\" text=\"ReactJS\" closable />\n                <Chip text=\"Vuexy\" closable />\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {chipsClosable}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ChipsClosable\n","import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport {\n  Eye,\n  Code,\n  XCircle,\n  Trash,\n  Trash2,\n  Delete,\n  MinusCircle\n} from \"react-feather\"\nimport Chip from \"./ChipComponent\"\nimport { chipsClosableIcons } from \"./ChipSourceCode\"\n\nclass ChipsClosableIcons extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Customized Closeable Icon</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              You can use prop <code>closableIcon</code> with prop{\" \"}\n              <code>closable</code> to create a chip with customized close icon.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Chip\n                  className=\"mr-1\"\n                  text=\"Dribble\"\n                  closableIcon={<Trash />}\n                  closable\n                />\n                <Chip\n                  className=\"mr-1\"\n                  text=\"Github\"\n                  closableIcon={<Trash2 />}\n                  closable\n                />\n                <Chip\n                  className=\"mr-1\"\n                  text=\"Behance\"\n                  closableIcon={<Delete />}\n                  closable\n                />\n                <Chip\n                  className=\"mr-1\"\n                  text=\"ReactJS\"\n                  closableIcon={<MinusCircle />}\n                  closable\n                />\n                <Chip text=\"Vuexy\" closableIcon={<XCircle />} closable />\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {chipsClosableIcons}{\" \"}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ChipsClosableIcons\n","import React from \"react\"\nimport { Row, Col } from \"reactstrap\"\nimport BreadCrumbs from \"../../@vuexy/breadCrumbs/BreadCrumb\"\nimport ChipsDefault from \"./ChipsDefault\"\nimport ChipsColors from \"./ChipsColors\"\nimport ChipsAvatarColors from \"./ChipsAvatarColors\"\nimport ChipsIcons from \"./ChipsIcons\"\nimport ChipsClosable from \"./ChipsClosable\"\nimport ChipsClosableIcons from \"./ClosableIcons\"\nimport Prism from \"prismjs\"\nimport \"prismjs/components/prism-jsx.min\"\nclass Chips extends React.Component {\n  componentDidMount() {\n    Prism.highlightAll()\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <BreadCrumbs\n          breadCrumbTitle=\"Chips\"\n          breadCrumbParent=\"Extra Components\"\n          breadCrumbActive=\"Chips\"\n        />\n        <Row>\n          <Col sm=\"12\">\n            <ChipsDefault />\n          </Col>\n          <Col sm=\"12\">\n            <ChipsColors />\n          </Col>\n          <Col sm=\"12\">\n            <ChipsAvatarColors />\n          </Col>\n          <Col sm=\"12\">\n            <ChipsIcons />\n          </Col>\n          <Col sm=\"12\">\n            <ChipsClosable />\n          </Col>\n          <Col sm=\"12\">\n            <ChipsClosableIcons />\n          </Col>\n        </Row>\n      </React.Fragment>\n    )\n  }\n}\nexport default Chips\n"],"sourceRoot":""}