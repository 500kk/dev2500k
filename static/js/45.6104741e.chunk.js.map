{"version":3,"sources":["extensions/extensionsHeader.js","extensions/import-export/Import.js"],"names":["ExtensionsHeader","className","sm","data-tour","this","props","title","link","href","target","rel","subTitle","React","Component","Uploader","useDropzone","accept","onDrop","acceptedFiles","reader","FileReader","onload","fileData","result","wb","XLSX","read","type","SheetNames","forEach","sheetName","rowObj","utils","sheet_to_row_object_array","Sheets","getTableData","name","length","readAsBinaryString","toast","error","getRootProps","getInputProps","size","Import","state","tableData","filteredData","value","arr","setState","handleFilter","e","data","filter","col","keys","Object","startsWithCondition","key","toString","toLowerCase","startsWith","includesCondition","includes","headArr","map","index","dataArr","renderTableBody","renderTd","renderTableHead","head","Fragment","onChange","responsive"],"mappings":"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","file":"static/js/45.6104741e.chunk.js","sourcesContent":["import React from \"react\"\nimport { Row, Col } from \"reactstrap\"\n// import { Star } from \"react-feather\"\n\nclass ExtensionsHeader extends React.Component {\n  render() {\n    return (\n      <Row className=\"mb-2\">\n        <Col sm=\"12\" className=\"ml-50\">\n          <p\n            className=\"font-medium-5 mt-1 extension-title\"\n            data-tour=\"extension-title\"\n          >\n            {this.props.title}\n          </p>\n          {this.props.link ? <a href={this.props.link} target=\"_blank\" rel=\"noopener noreferrer\">\n            {this.props.subTitle}\n          </a> : <p className=\"text-primary\">{this.props.subTitle}</p> \n          }\n        </Col>\n      </Row>\n    )\n  }\n}\nexport default ExtensionsHeader\n","import React from \"react\"\nimport ExtensionsHeader from \"../extensionsHeader\"\nimport {\n  Row,\n  Col,\n  Card,\n  CardBody,\n  Table,\n  CardHeader,\n  CardTitle,\n  Input\n} from \"reactstrap\"\nimport XLSX from \"xlsx\"\nimport { DownloadCloud, Search } from \"react-feather\"\nimport { useDropzone } from \"react-dropzone\"\nimport { toast, ToastContainer } from \"react-toastify\"\n\nimport \"react-toastify/dist/ReactToastify.css\"\nimport \"../../assets/scss/plugins/extensions/toastr.scss\"\nimport \"../../assets/scss/plugins/extensions/dropzone.scss\"\n\nfunction Uploader(props) {\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: \".xlsx, .xls, .csv\",\n    onDrop: acceptedFiles => {\n      var reader = new FileReader()\n      reader.onload = function() {\n        var fileData = reader.result\n        var wb = XLSX.read(fileData, { type: \"binary\" })\n\n        wb.SheetNames.forEach(function(sheetName) {\n          var rowObj = XLSX.utils.sheet_to_row_object_array(\n            wb.Sheets[sheetName]\n          )\n          props.getTableData(rowObj, acceptedFiles[0].name)\n        })\n      }\n      if (acceptedFiles.length) {\n        reader.readAsBinaryString(acceptedFiles[0])\n      } else {\n        toast.error(\"You can only upload .xlsx, .xls, .csv Files!\")\n      }\n    }\n  })\n  return (\n    <section className=\"pb-1\">\n      <div {...getRootProps({ className: \"dropzone py-3 flex-column\" })}>\n        <input {...getInputProps()} />\n        <DownloadCloud className=\"text-light\" size={50} />\n        <h4 className=\"mb-0 mt-2\">Drop Excel File or Browse</h4>\n      </div>\n    </section>\n  )\n}\n\nclass Import extends React.Component {\n  state = {\n    tableData: [],\n    filteredData: [],\n    value: \"\",\n    name: \"\"\n  }\n\n  getTableData = (arr, name) => {\n    this.setState({ tableData: arr, name })\n  }\n\n  handleFilter = e => {\n    let data = this.state.tableData\n    let filteredData = []\n    let value = e.target.value\n    this.setState({ value })\n\n    if (value.length) {\n      filteredData = data.filter(col => {\n        let keys = Object.keys(col)\n\n        let startsWithCondition = keys.filter(key => {\n          return col[key]\n            .toString()\n            .toLowerCase()\n            .startsWith(value.toLowerCase())\n        })\n\n        let includesCondition = keys.filter(key =>\n          col[key]\n            .toString()\n            .toLowerCase()\n            .includes(value.toLowerCase())\n        )\n\n        if (startsWithCondition.length) return col[startsWithCondition]\n        else if (!startsWithCondition && includesCondition.length)\n          return col[includesCondition]\n        else return null\n      })\n      this.setState({ value, filteredData })\n    } else {\n      return null\n    }\n  }\n\n  render() {\n    let headArr = this.state.tableData.length\n      ? this.state.tableData.map((col, index) => {\n          if (index === 0) return [...Object.keys(col)]\n          else return null\n        })\n      : []\n    let dataArr = this.state.value.length\n      ? this.state.filteredData\n      : this.state.tableData.length && !this.state.value.length\n      ? this.state.tableData\n      : null\n    let renderTableBody =\n      dataArr !== null && dataArr.length\n        ? dataArr.map((col, index) => {\n            let keys = Object.keys(col)\n            let renderTd = keys.map((key, index) => (\n              <td key={index}>{col[key]}</td>\n            ))\n            return <tr key={index}>{renderTd}</tr>\n          })\n        : null\n\n    let renderTableHead = headArr.length\n      ? headArr[0].map((head, index) => {\n          return <th key={index}>{head}</th>\n        })\n      : null\n\n    return (\n      <React.Fragment>\n        <ExtensionsHeader\n          title=\"XLSX\"\n          subTitle=\"Xlsx is a parser and writer for various spreadsheet formats\"\n          link=\"https://github.com/AdeleD/react-paginate\"\n        />\n        <Row className=\"import-component\">\n          <Col sm=\"12\">\n            <Card>\n              <CardBody>\n                <Row>\n                  <Col sm=\"12\">\n                    <Uploader getTableData={this.getTableData} />\n                  </Col>\n                </Row>\n              </CardBody>\n            </Card>\n          </Col>\n          {this.state.tableData.length ? (\n            <Col sm=\"12\">\n              <Card>\n                <CardHeader className=\"justify-content-between flex-wrap\">\n                  <CardTitle>{this.state.name}</CardTitle>\n                  <div className=\"filter position-relative has-icon-left\">\n                    <Input\n                      type=\"text\"\n                      value={this.state.value}\n                      onChange={e => this.handleFilter(e)}\n                    />\n                    <div className=\"form-control-position\">\n                      <Search size={15} />\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardBody>\n                  <Table className=\"table-hover-animation\" responsive>\n                    <thead>\n                      <tr>{renderTableHead}</tr>\n                    </thead>\n                    <tbody>{renderTableBody}</tbody>\n                  </Table>\n                </CardBody>\n              </Card>\n            </Col>\n          ) : null}\n          <ToastContainer />\n        </Row>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Import\n"],"sourceRoot":""}