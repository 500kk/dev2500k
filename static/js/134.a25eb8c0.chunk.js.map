{"version":3,"sources":["views/ui-elements/cards/actions/CardActions.js"],"names":["CardActions","state","collapse","reload","isVisible","status","isVisibleAll","reloadAll","collapseAll","statusAll","refreshCard","setState","setTimeout","refreshCardAll","toggle","toggleAll","onEntered","onEnteredAll","onEntering","onEnteringAll","onExited","onExiting","onExitingAll","onExitedAll","removeCard","removeCardAll","Fragment","breadCrumbTitle","breadCrumbParent","breadCrumbActive","sm","responsive","bordered","className","size","md","classnames","this","closing","opening","onClick","isOpen","refreshing","color","React","Component"],"mappings":"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","file":"static/js/134.a25eb8c0.chunk.js","sourcesContent":["import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Row,\n  Col,\n  Table,\n  Collapse,\n  Spinner\n} from \"reactstrap\"\nimport { ChevronDown, RotateCw, X } from \"react-feather\"\nimport classnames from \"classnames\"\nimport Breadcrumbs from \"../../../../components/@vuexy/breadCrumbs/BreadCrumb\"\n\nclass CardActions extends React.Component {\n  state = {\n    collapse: true,\n    reload: false,\n    isVisible: true,\n    status: \"Opened\",\n    isVisibleAll: true,\n    reloadAll: false,\n    collapseAll: true,\n    statusAll: \"Opened\"\n  }\n\n  refreshCard = () => {\n    this.setState({ reload: true })\n    setTimeout(() => {\n      this.setState({ reload: false })\n    }, 2000)\n  }\n  refreshCardAll = () => {\n    this.setState({ reloadAll: true })\n    setTimeout(() => {\n      this.setState({ reloadAll: false })\n    }, 2000)\n  }\n\n  toggle = () => {\n    this.setState(state => ({ collapse: !state.collapse }))\n  }\n  toggleAll = () => {\n    this.setState(state => ({ collapseAll: !state.collapseAll }))\n  }\n  onEntered = () => {\n    this.setState({ status: \"Opened\" })\n  }\n  onEnteredAll = () => {\n    this.setState({ status: \"Opened\" })\n  }\n\n  onEntering = () => {\n    this.setState({ status: \"Opening...\" })\n  }\n  onEnteringAll = () => {\n    this.setState({ statusAll: \"Opening...\" })\n  }\n\n  onEnteredAll = () => {\n    this.setState({ statusAll: \"Opened\" })\n  }\n\n  onExited = () => {\n    this.setState({ status: \"Closed\" })\n  }\n\n  onExiting = () => {\n    this.setState({ status: \"Closing...\" })\n  }\n\n  onExitingAll = () => {\n    this.setState({ statusAll: \"Closing...\" })\n  }\n  onExitedAll = () => {\n    this.setState({ statusAll: \"Closed\" })\n  }\n\n  removeCard = () => {\n    this.setState({ isVisible: false })\n  }\n  removeCardAll = () => {\n    this.setState({ isVisibleAll: false })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Breadcrumbs\n          breadCrumbTitle=\"Card Actions\"\n          breadCrumbParent=\"Card\"\n          breadCrumbActive=\"Card Actions\"\n        />\n        <Row>\n          <Col sm=\"12\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Card Actions</CardTitle>\n              </CardHeader>\n              <CardBody>\n                <Table responsive bordered>\n                  <thead>\n                    <tr>\n                      <th>Action</th>\n                      <th>Icon</th>\n                      <th>Details</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>Collapse</td>\n                      <td className=\"text-center\">\n                        <ChevronDown className=\"collapse-icon\" size={15} />\n                      </td>\n                      <td> Collapse card content using collapse action.</td>\n                    </tr>\n                    <tr>\n                      <td>Refresh Content</td>\n                      <td className=\"text-center\">\n                        <RotateCw size={15} />\n                      </td>\n                      <td>Refresh your card content using refresh action.</td>\n                    </tr>\n                    <tr>\n                      <td>Remove Card</td>\n                      <td className=\"text-center\">\n                        <X size={15} />\n                      </td>\n                      <td> Remove card from page using remove card action</td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <Card\n              className={classnames(\"card-action\", {\n                \"card-collapsed\": this.state.status === \"Closed\",\n                \"card-shown\": this.state.status === \"Opened\",\n                closing: this.state.status === \"Closing...\",\n                opening: this.state.status === \"Opening...\"\n              })}\n            >\n              <CardHeader>\n                <CardTitle>Collapsible</CardTitle>\n                <ChevronDown\n                  className=\"collapse-icon\"\n                  size={15}\n                  onClick={this.toggle}\n                />\n              </CardHeader>\n              <Collapse\n                isOpen={this.state.collapse}\n                onExited={this.onExited}\n                onEntered={this.onEntered}\n                onExiting={this.onExiting}\n                onEntering={this.onEntering}\n              >\n                <CardBody>\n                  <p>\n                    You can create collapsible card using reactstrap's collapse\n                    component, to create a collapsible card you'll have to\n                    manage it's collapse state.\n                  </p>\n                  <p>\n                    Click on <ChevronDown size={15} /> to see card collapse in\n                    action\n                  </p>\n                </CardBody>\n              </Collapse>\n            </Card>\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <Card\n              className={classnames(\"card-reload card-action\", {\n                refreshing: this.state.reload\n              })}\n            >\n              <CardHeader>\n                <CardTitle>Refresh</CardTitle>\n                <RotateCw size={15} onClick={this.refreshCard} />\n              </CardHeader>\n              <CardBody>\n                {this.state.reload ? (\n                  <Spinner color=\"primary\" className=\"reload-spinner\" />\n                ) : (\n                  \"\"\n                )}\n                <p>\n                  You can add refresh content action to card by adding class{\" \"}\n                  <code>.card-reload</code> with your card tag, and add\n                  conditional spinner into card body to showp when card is\n                  refreshing.\n                </p>\n                <p>\n                  Click on <RotateCw size={15} /> to see card refresh in action\n                </p>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <Card\n              className={classnames(\"card-action\", {\n                \"d-none\": this.state.isVisible === false\n              })}\n            >\n              <CardHeader>\n                <CardTitle>Remove Card</CardTitle>\n                <X size={15} onClick={this.removeCard} />\n              </CardHeader>\n              <CardBody>\n                <p>\n                  You can create a removable card by managing state{\" \"}\n                  <code>isVisible</code>, which will add conditional d-none\n                  class which clicked on icon to remove your card.\n                </p>\n                <p>\n                  Click on <X size={15} /> to see card refresh in action\n                </p>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <Card\n              className={classnames(\"card-action card-reload\", {\n                \"d-none\": this.state.isVisibleAll === false,\n                refreshing: this.state.reloadAll,\n                \"card-collapsed\": this.state.statusAll === \"Closed\",\n                closing: this.state.statusAll === \"Closing...\",\n                opening: this.state.statusAll === \"Opening...\"\n              })}\n            >\n              <CardHeader>\n                <CardTitle>All Actions</CardTitle>\n                <div className=\"actions\">\n                  <ChevronDown\n                    className=\"collapse-icon mr-50\"\n                    size={15}\n                    onClick={this.toggleAll}\n                  />\n                  <RotateCw\n                    className=\"mr-50\"\n                    size={15}\n                    onClick={this.refreshCardAll}\n                  />\n                  <X size={15} onClick={this.removeCardAll} />\n                </div>\n              </CardHeader>\n              <Collapse\n                isOpen={this.state.collapseAll}\n                onExited={this.onExitedAll}\n                onEntered={this.onEnteredAll}\n                onExiting={this.onExitingAll}\n                onEntering={this.onEnteringAll}\n              >\n                <CardBody>\n                  {this.state.reloadAll ? (\n                    <Spinner color=\"primary\" className=\"reload-spinner\" />\n                  ) : (\n                    \"\"\n                  )}\n                  You can also add all three action together by managing all\n                  three actions's required classes and by managing their states.\n                </CardBody>\n              </Collapse>\n            </Card>\n          </Col>\n        </Row>\n      </React.Fragment>\n    )\n  }\n}\nexport default CardActions\n"],"sourceRoot":""}